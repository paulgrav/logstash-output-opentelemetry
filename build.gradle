import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"

// ===========================================================================
// plugin info
// ===========================================================================
group                      'net.stomer' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "OpenTelemetry Output Plugin"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "A Logstash output plugin that allows logs to be output to OpenTelemetry otlp endpoints."
pluginInfo.authors         = ['Paul Grave']
pluginInfo.email           = ['paul@stomer.net']
pluginInfo.homepage        = "https://github.com/paulgrav/logstash-output-opentelemetry"
pluginInfo.pluginType      = "output"
pluginInfo.pluginClass     = "Opentelemetry"
pluginInfo.pluginName      = "opentelemetry" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    archiveClassifier = null
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.9.1'
    implementation 'io.opentelemetry:opentelemetry-sdk-logs:1.10.0-alpha'
    implementation 'io.opentelemetry:opentelemetry-exporter-logging:1.10.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp-logs:1.10.0-alpha'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp-http-logs:1.10.0-alpha'
    implementation(fileTree(dir: LOGSTASH_CORE_PATH, include: "/build/libs/logstash-core-*.*.*.jar"))
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jruby:jruby-complete:9.1.13.0'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.9.1'
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-*.*.*.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register("vendor"){
    dependsOn shadowJar
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar projectJarFile, project.group
    }
}

tasks.register("generateRubySupportFiles") {
    doLast {
        String moduleName = pluginInfo.pluginType.substring(0, 1).toUpperCase() + pluginInfo.pluginType.substring(1) + "s"
        File pluginRb = file("lib/logstash/" + pluginInfo.pluginType + "s/" + pluginInfo.pluginName + ".rb")
        Files.createDirectories(pluginRb.toPath().getParent())
        pluginRb.write("# AUTOGENERATED BY THE GRADLE SCRIPT. EDITS WILL BE OVERWRITTEN.\n")
        pluginRb.append("# encoding: utf-8\n")
        pluginRb.append("require \"logstash/" + pluginInfo.pluginType + "s/base\"\n")
        pluginRb.append("require \"logstash/namespace\"\n")
        pluginRb.append("require \"" + pluginInfo.pluginFullName() + "_jars\"\n")
        pluginRb.append("require \"java\"\n")
        pluginRb.append("\n")
        pluginRb.append("class LogStash::" + moduleName + "::" + pluginInfo.pluginClass + " < LogStash::" + moduleName + "::Base\n")
        pluginRb.append("  config_name \"" + pluginInfo.pluginName + "\"\n")
        pluginRb.append("\n")
        pluginRb.append("  def self.javaClass() Java::" + project.group + "." + pluginInfo.pluginClass + ".java_class; end\n")
        pluginRb.append("end\n")

        File pluginJarsRb = file("lib/" + pluginInfo.pluginFullName() + "_jars.rb")
        pluginJarsRb.write("# AUTOGENERATED BY THE GRADLE SCRIPT. EDITS WILL BE OVERWRITTEN.\n")
        pluginJarsRb.append("# encoding: utf-8\n")
        pluginJarsRb.append("\n")
        pluginJarsRb.append("require 'jar_dependencies'\n")
        pluginJarsRb.append("require_jar('" + project.group + "', '" + pluginInfo.pluginFullName() + "', '" + version +"')\n")
    }
}

tasks.register("removeObsoleteJars") {
    doLast {
        for (f in new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar")) {
            delete f
        }
    }
}

tasks.register("gem"){
    dependsOn downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}
